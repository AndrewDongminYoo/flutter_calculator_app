dev:
  (description): Runs the Flutter application with hot reload enabled, ignoring deprecation warnings.
  (scripts): flutter run --target lib/main.dart --flavor development --hot --ignore-deprecation

reinstall:
  (description): Cleans and reinstalls the Flutter project by removing old builds, fetching dependencies, running code generators, and formatting the code.
  (scripts):
    - flutter clean
    - flutter pub get
    - $bootstrap

bootstrap:
  (description): Initializes the project by generating necessary code, sorting imports, applying fixes, and formatting.
  (scripts):
    - $generate
    - $format

generate:
  (description): Runs code generation builders and sorts imports to set up project files.
  (scripts):
    - dart run build_runner build --delete-conflicting-outputs

format:
  (description): Applies automated fixes, sorts imports, and formats the codebase to ensure consistent code quality.
  (scripts):
    - dart fix --apply
    - dart run import_sorter:main -e
    - dart format --line-length 120 .

ci:
  (description): Ensures that the lockfile is enforced by getting dependencies in a CI environment.
  (scripts): flutter pub get --enforce-lockfile

dry:
  (description): Checks for outdated dependencies and saves the results in JSON format.
  (scripts): flutter pub outdated --json > logs/outdated.json

hard:
  (description): Forces an upgrade of Flutter and its packages to their latest versions and updates CocoaPods dependencies for iOS and macOS.
  (scripts):
    - flutter upgrade --force
    - $up --major-versions --tighten
    - (cd macos && pod update)
    - (cd ios && pod update)

up:
  (description): Upgrades Flutter dependencies to their latest compatible versions.
  (scripts): flutter packages upgrade

build:
  aab:
    (description): Builds an Android App Bundle file for production, opens the output in Android Studio.
    (scripts): >
      flutter build appbundle
      --target=lib/main.dart --flavor production
      --release --tree-shake-icons --build-number $(date +'%y%m%d%H') &&
      open -a 'Android Studio' build/app/outputs/bundle/productionRelease

  ipa:
    (description): Builds an iOS archive bundle (.xcarchive) and IPA for production (.ipa), opens it in Xcode.
    (scripts): >
      flutter build ipa
      --target=lib/main.dart --flavor production
      --release --tree-shake-icons --build-number $(date +'%y%m%d%H') &&
      open -a 'Xcode' build/ios/archive/Runner.xcarchive

  apk:
    (description): Builds an Android APK file for production and opens the output directory.
    (scripts): >
      flutter build apk
      --target=lib/main.dart --flavor production
      --release --tree-shake-icons --build-number $(date +'%y%m%d%H') &&
      open build/app/outputs/flutter-apk

  ios:
    (description): Builds an iOS application bundle (.app file) for production.
    (scripts): >
      flutter build ios
      --target=lib/main.dart --flavor production
      --release --tree-shake-icons --build-number $(date +'%y%m%d%H') &&
      open -a 'Xcode' build/ios/iphoneos/Runner.app
